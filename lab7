import java.util.*;

interface EmployeePosition {
    public String getJobTitle();
    public double calcSalary();
}

abstract class Employee {
    protected String name;
    protected String lastName;
    protected double baseSalary;
    protected String jobTitle;
    protected int hisIncome;

    public int getHisIncome(){
        return hisIncome;
    };

    public String toString(){
        return name + " " + lastName;
    }
}

class Manager extends Employee implements  EmployeePosition{
    public Manager(String name, String lastName){
        this.name = name;
        this.lastName = lastName;
        this.jobTitle = "Manager";

        Random random = new Random();
        hisIncome = random.nextInt(150000 - 80000) + 80000;
        baseSalary = random.nextInt(140000 - 115000) + 150000;
    }

    @Override
    public double calcSalary() {
        return baseSalary + 0.05 * hisIncome;
    }

    @Override
    public String getJobTitle() {
        return jobTitle;
    }
}

class TopManager extends Employee implements EmployeePosition{
    public TopManager(String name, String lastName){
        this.name = name;
        this.lastName = lastName;
        this.jobTitle = "Top manager";

        Random random = new Random();
        hisIncome = 0;
        baseSalary = random.nextInt(140000 - 115000) + 150000;
    }
    @Override
    public String getJobTitle() {
        return jobTitle;
    }

    @Override
    public double calcSalary(int income) {
        //найти прибыль компании
        if (income() > 10000000)
            return 2.5 * baseSalary;
        return baseSalary;
    }
}

class Operator extends Employee implements EmployeePosition{
    public Operator(String name, String lastName){
        this.name = name;
        this.lastName = lastName;
        this.jobTitle = "Operator";

        Random random = new Random();
        hisIncome = 0;
        baseSalary = random.nextInt(100000 - 80000) + 80000;
    }

    @Override
    public String getJobTitle() {
        return jobTitle;
    }

    @Override
    public double calcSalary() {
        return baseSalary;
    }
}

class Company{
    private ArrayList<Employee> allEmpoyeers= new ArrayList<>();

    List<Employee> getTopSalaryStaff(int count){
        ArrayList<Employee> list = allEmpoyeers;
        Collections.sort(list);
        return list;
    }

    List<Employee> getLowestSalary(int count){
        ArrayList<Employee> list = allEmpoyeers;
        Collections.sort(list, Collections.reverseOrder());
        return list;
    }

    void hire(Employee man) {
        allEmpoyeers.add(man);
    }

    void hireAll(List<Employee> people){
        for (Employee man : people)
            allEmpoyeers.add(man);
    }

    void fire(Employee man){
        for (Employee employee : allEmpoyeers){
            if (employee.equals(man))
                allEmpoyeers.remove(employee);
        }
    }

    double getIncome(){
        int income = 0;
        for (Employee man : allEmpoyeers)
            income += man.getHisIncome();
    }
}

public class Lab7 {
    public static void main(String[] args) {
        Company mirea = new Company();

        for (int i = 0; i < 180; i++){
            Operator operator = new Operator("Operator","" + i);
            mirea.hire(operator);
        }

        for (int i = 0; i < 80; i++){
            Manager manager = new Manager("Manager", "" + i);
            mirea.hire(manager);
        }

        for (int i = 0; i < 10; i++){
            TopManager topManager = new TopManager("Top manager", ""+i);
            mirea.hire(topManager);
        }

        for (int i = 0; i < 10; i++)
            System.out.println(mirea.getTopSalaryStaff(10)[i]);
    }
}
